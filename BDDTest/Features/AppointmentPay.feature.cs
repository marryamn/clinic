// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AppointmentPayFeature : object, Xunit.IClassFixture<AppointmentPayFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AppointmentPay.feature"
#line hidden
        
        public AppointmentPayFeature(AppointmentPayFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AppointmentPay", "  exist some patient and some appointmentPay and some insurances\r\n  Check NotComp" +
                    "lete Installment and InsurancePaidAmount", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GetNotCompleteInstallment work Successfully")]
        [Xunit.TraitAttribute("FeatureTitle", "AppointmentPay")]
        [Xunit.TraitAttribute("Description", "GetNotCompleteInstallment work Successfully")]
        public async System.Threading.Tasks.Task GetNotCompleteInstallmentWorkSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetNotCompleteInstallment work Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Phone"});
                table1.AddRow(new string[] {
                            "1",
                            "maryam",
                            "09142564968"});
                table1.AddRow(new string[] {
                            "2",
                            "User",
                            "09142589636"});
#line 6
        await testRunner.GivenAsync("the following patient exist in the database", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PatientId",
                            "IsPaid",
                            "PaidTime",
                            "InsuranceId",
                            "Price",
                            "AppointmentId"});
                table2.AddRow(new string[] {
                            "1",
                            "1",
                            "false",
                            "2023-04-05",
                            "1",
                            "1000",
                            "1"});
                table2.AddRow(new string[] {
                            "2",
                            "1",
                            "true",
                            "2023-04-01",
                            "1",
                            "2000",
                            "1"});
                table2.AddRow(new string[] {
                            "3",
                            "1",
                            "true",
                            "2023-04-01",
                            "2",
                            "2000",
                            "1"});
                table2.AddRow(new string[] {
                            "4",
                            "1",
                            "true",
                            "2023-04-01",
                            "1",
                            "4000",
                            "1"});
#line 10
        await testRunner.AndAsync("the following appointmentPay items  in database", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "patientId",
                            "IsPaid",
                            "Page"});
                table3.AddRow(new string[] {
                            "1",
                            "false",
                            "1"});
#line 16
        await testRunner.WhenAsync("I Send Request to GetNotCompleteInstallment with this input", ((string)(null)), table3, "When ");
#line hidden
#line 19
        await testRunner.ThenAsync("the GetNotCompleteInstallment data is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GetNotCompleteInstallment Give Error")]
        [Xunit.TraitAttribute("FeatureTitle", "AppointmentPay")]
        [Xunit.TraitAttribute("Description", "GetNotCompleteInstallment Give Error")]
        public async System.Threading.Tasks.Task GetNotCompleteInstallmentGiveError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetNotCompleteInstallment Give Error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "patientId",
                            "IsPaid",
                            "Page"});
                table4.AddRow(new string[] {
                            "3",
                            "false",
                            "1"});
#line 22
        await testRunner.WhenAsync("I Send Request to GetNotCompleteInstallment with this Not Correct input", ((string)(null)), table4, "When ");
#line hidden
#line 25
        await testRunner.ThenAsync("the GetNotCompleteInstallment data is not correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GetInsurancePaidAppointmentPay work Successfully")]
        [Xunit.TraitAttribute("FeatureTitle", "AppointmentPay")]
        [Xunit.TraitAttribute("Description", "GetInsurancePaidAppointmentPay work Successfully")]
        public async System.Threading.Tasks.Task GetInsurancePaidAppointmentPayWorkSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetInsurancePaidAppointmentPay work Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table5.AddRow(new string[] {
                            "1",
                            "Iran"});
                table5.AddRow(new string[] {
                            "2",
                            "Mellat"});
#line 30
        await testRunner.GivenAsync("the following insurance exist in the database", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PatientId",
                            "IsPaid",
                            "PaidTime",
                            "InsuranceId",
                            "Price",
                            "AppointmentId"});
                table6.AddRow(new string[] {
                            "1",
                            "1",
                            "false",
                            "2023-04-05",
                            "1",
                            "1000",
                            "1"});
                table6.AddRow(new string[] {
                            "2",
                            "1",
                            "true",
                            "2023-04-01",
                            "1",
                            "2000",
                            "1"});
                table6.AddRow(new string[] {
                            "3",
                            "1",
                            "true",
                            "2023-04-01",
                            "2",
                            "2000",
                            "1"});
                table6.AddRow(new string[] {
                            "4",
                            "1",
                            "true",
                            "2023-04-01",
                            "1",
                            "4000",
                            "1"});
#line 34
      await testRunner.AndAsync("the following appointmentPay items  in database again", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "InsuranceId"});
                table7.AddRow(new string[] {
                            "1"});
#line 40
        await testRunner.WhenAsync("I Send Request to GetInsurancePaidAppointmentPay with this input", ((string)(null)), table7, "When ");
#line hidden
#line 43
        await testRunner.ThenAsync("the GetInsurancePaidAppointmentPay data is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GetInsurancePaidAppointmentPay Give Error")]
        [Xunit.TraitAttribute("FeatureTitle", "AppointmentPay")]
        [Xunit.TraitAttribute("Description", "GetInsurancePaidAppointmentPay Give Error")]
        public async System.Threading.Tasks.Task GetInsurancePaidAppointmentPayGiveError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetInsurancePaidAppointmentPay Give Error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "patientId",
                            "IsPaid",
                            "Page"});
                table8.AddRow(new string[] {
                            "3",
                            "false",
                            "1"});
#line 46
      await testRunner.WhenAsync("I Send Request to GetInsurancePaidAppointmentPay with this not Correct input", ((string)(null)), table8, "When ");
#line hidden
#line 49
      await testRunner.ThenAsync("the GetInsurancePaidAppointmentPay data is not correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AppointmentPayFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AppointmentPayFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
